# -*- coding: utf-8 -*-
"""Car Prediction project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ctckWGjujaeoCBIzQBcJqhSPkEIBmhN9

Business Problem :- Predict customer purchase ability on the basis of their attributes so that we can personalize sales.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

car = pd.read_csv('Car_Purchasing_Data.csv' , encoding = "ISO-8859-1")

car.head()

sns.pairplot(car)

X = car.drop(['Customer Name' ,'Customer e-mail','Country','Car Purchase Amount'], axis=1) #x is input

X

y= car.drop(car.iloc[: ,0:8], axis =1)

y

X.shape

#Normalizing the data using min-max scaling

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

X_scaled

scaler.data_max_

y= y.values.reshape(-1,1)

y_scaled= scaler.fit_transform(y)

y_scaled

from sklearn.model_selection import train_test_split
X_train ,X_test, y_train, y_test =  train_test_split(X_scaled ,y_scaled , test_size = 0.15)

X_train.shape

import tensorflow.keras
from keras.models import Sequential

from keras.layers import Dense

model  = Sequential()
model.add(Dense(20,input_dim = 5 ,activation = 'relu'))
model.add(Dense(20,activation = 'relu'))
model.add(Dense(1 , activation = 'linear'))

model.summary()

model.compile(optimizer='adam' , loss = 'mean_squared_error')

epochs_hist = model.fit(X_train, y_train, epochs=20 , batch_size = 25 , verbose = 1, validation_split = 0.2)

epochs_hist.history.keys()

plt.plot(epochs_hist.history['loss'])
plt.plot(epochs_hist.history['val_loss'])
plt.title("Model loss chart")
plt.ylabel("Training and Validation Loss")
plt.xlabel("epochs")
plt.legend(['Training Loss','Validation Loss'])
plt.show()

#this shows we converged within 10 epochs.
X_test_sample = np.array([[0, 0.4370344,  0.53515116, 0.57836085, 0.22342985]])
y_pred =model.predict(X_test_sample)

print("prediction for custom data is " ,y_pred )
y_predict_sample_orig = scaler.inverse_transform(y_pred)
print('Expected Purchase Amount=', y_predict_sample_orig)

